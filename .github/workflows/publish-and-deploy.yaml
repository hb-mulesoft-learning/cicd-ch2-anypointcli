name: Publish and deploy

on:
  workflow_call:
    inputs:
      githubActionsArtifactName:
        required: false
        type: string
        default: maven-artifact
      targetEnv:
        required: true
        type: string
      isProdDevelopment:
        required: true
        type: boolean
      pomArtifactVersion:
        required: true
        type: string
        description: POM Version in semver format
      pomArtifactId:
        required: true
        type: string
    secrets:
      EXCHANGE_CLIENT_ID:
        required: true
      EXCHANGE_CLIENT_SECRET:
        required: true

defaults:
  run:
    shell: bash
    
jobs:

  publish-and-deploy:
    runs-on: ubuntu-latest
    name: Publish and deploy
    environment: ${{ inputs.targetEnv }}
    steps:          
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.githubActionsArtifactName }}  
      
      - name: Get Deployable jar name
        id: getJarName
        run: |
          jarName=`ls *jar`
          echo "Executable Jar name = ${jarName}"
          echo "jarName=$jarName" >> "$GITHUB_OUTPUT"
      
      - name: Setup node
        uses: actions/setup-node@v3
        with: 
          node-version: 18.14.0
      
      - name: Setup anypoint CLI
        run: |
          npm install -g anypoint-cli-v4
      
      - name: Publish To Exchange
        env:
          ANYPOINT_CLIENT_ID: ${{ secrets.EXCHANGE_CLIENT_ID }}
          ANYPOINT_CLIENT_SECRET: ${{ secrets.EXCHANGE_CLIENT_SECRET }}
          IS_STABLE_VERSION: ${{ inputs.isProdDevelopment }}
          ASSET_VERSION: ${{ inputs.pomArtifactVersion }}
          ASSET_NAME: ${{ inputs.pomArtifactId }}
          JAR_FILE: ${{ steps.getJarName.outputs.jarName }}
        run: |
          if [[ $IS_STABLE_VERSION == true ]]; then
            assetStatus='published'
          else
            assetStatus='development'
          fi
          anypoint-cli-v4 exchange asset upload $ASSET_NAME/$ASSET_VERSION \
          --type app \
          --files "{\"mule-application.jar\": \"$JAR_FILE\"}" \
          --status $assetStatus \
          --name $ASSET_NAME
      
      - name: Deploy to ${{ inputs.targetEnv }}
        env:
          ANYPOINT_CLIENT_ID: ${{ secrets.EXCHANGE_CLIENT_ID }}
          ANYPOINT_CLIENT_SECRET: ${{ secrets.EXCHANGE_CLIENT_SECRET }}
          ASSET_VERSION: ${{ inputs.pomArtifactVersion }}
          ASSET_NAME: ${{ inputs.pomArtifactId }}
          DEPLOY_ENV: ${{ vars.DEPLOY_ENV }}
          DEPLOY_TARGET: ${{ vars.DEPLOY_TARGET }}
          DEPLOY_REPLICAS: ${{ vars.DEPLOY_REPLICAS }}
          DEPLOY_VCORES: ${{ vars.DEPLOY_VCORES }}
          DEPLOY_RUNTIME: ${{ vars.DEPLOY_RUNTIME }}
        run: | 
          existingDeployId = (anypoint-cli-v4.cmd runtime-mgr application list --environment Sandbox --output json | node <<-'EOF'
            process.stdin.on('data', data => {
              var jsonData = JSON.parse(data)
              var id = jsonData.filter((deploymentDetail) => 
                deploymentDetail.name == process.env.ASSET_NAME
                && deploymentDetail.target.targetId == process.env.DEPLOY_TARGET
              )?.[0]?.name
              console.log(id || '')
            })
            'EOF'
          )
          echo "got existingDeployId = $existingDeployId"
          anypoint-cli-v4 \
          runtime-mgr application deploy $ASSET_NAME $DEPLOY_TARGET $DEPLOY_RUNTIME $ASSET_NAME  \
          --assetVersion $ASSET_VERSION \
          --environment $DEPLOY_ENV \
          --objectStoreV2 \
          --replicas $DEPLOY_REPLICAS \
          --replicaSize $DEPLOY_VCORES
